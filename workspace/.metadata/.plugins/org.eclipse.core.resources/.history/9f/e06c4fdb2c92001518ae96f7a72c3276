
//CLASS: RawData - Used by Setup program
//AUTHOR: Blake
//*****************************************************************************************************
import java.awt.event.FocusAdapter;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.RandomAccessFile;
import java.util.ArrayList;
import java.util.Formatter;

public class CodeIndex {
	private short M = 0;
	private short RootPtr = 0;
	private short N = 0;
	RandomAccessFile file;
	private short[] TP;
	private String[] KV;
	private short[] DRP;
	private int nodesRead;
	private int sizeOfDataRec;


	public CodeIndex(String fileName) throws IOException {

		file = new RandomAccessFile(fileName, "r");

	}


// Reads whole file for testing
	public void readFile() throws IOException {
		file.seek(6);
		while (file.getFilePointer() < file.length()) {
		for (int j = 0; j < M-1; j++) {

			System.out.print(file.readShort());
			for (int i = 0; i < 3; i++) {
				System.out.print((char) file.readByte());
			}
			System.out.print(file.readShort());

		}
		System.out.print(file.readShort());
		System.out.println();
	}

	}
	
	// Reads the Header Record
	public void setupApp() throws IOException {
		file.seek(0);
		M = file.readShort();
		RootPtr = file.readShort();
		N = file.readShort();
		sizeOfDataRec = M  + 3 * (M - 1) + (M - 1);
	}
	
	private void readOneNode() throws IOException{
		nodesRead++;
		for(int i = 0; i < M-1; i++)
			KV[i] = "";
		
		for(int i = 0; i < M; i++)
			TP[i] = file.readByte();
		for(int i = 0; i < M-1; i++)
			for(int j = 0; j < 3; j++)
				KV[i] += (char) file.readByte();
		for(int i = 0; i < M-1; i++)
			DRP[i] = file.readByte();
	}
	
	
	private int searchOneNode(int pointer, String code) throws IOException {
		byteOffset(pointer);
		readOneNode();
		
		for (int i = 0; i < M-1; i++)
			if(code.compareTo(KV[i]) < 0)
				if (TP[i] != -1)
					return searchOneNode(TP[i], code);
				else return -1;
			else if (code.compareTo(KV[i]) == 0)
				return DRP[i];
			else if ((code.compareTo(KV[i]) > 0 && i+1 == M-1)
				  || (code.compareTo(KV[i]) > 0 && KV[i+1].equals("]]]"))) 
				if (TP[i+1] != -1)
					return searchOneNode(TP[i+1], code);
				else return -1;
		return -1;
	}
	
	
	
	
	
	
	
	
	


		private void byteOffset(int rootPtr) throws IOException{
			byteOffset = 6 + ((rootPtr - 1) * sizeOfDataRec);
			file.seek(byteOffset);
		}
	


	// Closes the file
	public void finishUp() throws IOException {

		file.close();

	}

}
//
// final short SIZE_OF_A_CHAR = 1;
// final short SIZE_OF_CODE = (short) (3 * SIZE_OF_A_CHAR);
// final short SIZE_OF_NAME = (short) (18 * SIZE_OF_A_CHAR);
// final short SIZE_OF_CONT = (short) (13 * SIZE_OF_A_CHAR);
// String inFileName = "RawData2.csv";
// private FileReader input;
// private BufferedReader inFile;
// public int n = 0;
// private String name;
// private String continent;
// private String code;
// private short id;
// private int area;
// private long population;
// private float lifeExpectancy;
//
//
// public RawData() throws FileNotFoundException, IOException
// {
// input = new FileReader(inFileName);
// inFile = new BufferedReader(input);
// }
//
// //A single record read in.
// public boolean input1Country() throws IOException
// {
// String theLine = inFile.readLine();
// if(theLine != null)
// //if(theLine.length() != 0)
// {
// cleanup(theLine);
// n++;
// return true;
// }
// else
// return false;
// }
//
// //split record into individual fields
// private void cleanup(String theLine)
// {
// String field[] = theLine.split(",");
// id = Short.parseShort(field[0]);
// if(field[8].equals("NULL"))
// field[8] = "0.0";
// code = field[1];
// name = field[2];
// continent = field[3];
// area = Integer.parseInt(field[5]);
// population = Long.parseLong(field[7]);
// lifeExpectancy = Float.parseFloat(field[8]);
//
//
// }
//
// public int getN()
// {
//
// return n;
// }
//
// public Short getId()
// {
// return id;
// }
//
//
// public void finishUp() throws IOException
// {
// inFile.close();
// input.close();
// }
//
//
// public String getCode(){
// return code;
// }
//
//
// /*****************
// * Getter for name
// * @return
// */
// public String getName(){
// return name;
// }
//
// /**********************
// * Getter for continent
// * @return
// */
// public String getContinent(){
// return continent;
// }
//
// /*****************
// * Getter for area
// * @return
// */
// public int getArea(){
// return area;
// }
//
// /***********************
// * Getter for population
// * @return
// */
// public long getPopulation(){
// return population;
// }
//
// /***************************
// * Getter for lifeExpectancy
// * @return
// */
// public float getLifeExpectancy(){
// return lifeExpectancy;
// }
//
// }
//
//
//
//