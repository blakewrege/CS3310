
//CLASS: RawData - Used 
//AUTHOR: Blake
//*****************************************************************************************************
import java.io.IOException;
import java.io.RandomAccessFile;

public class CodeIndex {
	private short M = 0;
	private short rootPtr = 0;
	private short N = 0;
	RandomAccessFile file;
	private short[] TP;
	private String[] KV;
	private short[] DRP;
	private int nodesRead;
	private int sizeOfDataRec;
	private int byteOffset;

	int loc;

	public CodeIndex(String fileName) throws IOException {

		file = new RandomAccessFile(fileName, "r");

	}

	// Reads whole file for testing
	public void readFile() throws IOException {
		file.seek(6);
		while (file.getFilePointer() < file.length()) {
			System.out.print(file.getFilePointer() + "     ");
			for (int j = 0; j < M - 1; j++) {

				System.out.print(file.readShort());
				for (int i = 0; i < 3; i++) {
					System.out.print((char) file.readByte());
				}
				System.out.print(file.readShort());

			}
			System.out.print(file.readShort());
			System.out.println();
		}
	}

	// Reads the Header Record
	public void setupApp() throws IOException {
		file.seek(0);
		M = file.readShort();
		rootPtr = file.readShort();
		N = file.readShort();
		sizeOfDataRec = (M - 1) * (7) + 2;
		TP = new short[M];
		KV = new String[M - 1];
		DRP = new short[M - 1];
	}

	public int selectByCode(String code) throws IOException {
		nodesRead = 0;
		System.out.println(code + " " + rootPtr);
		int result = searchOneNode(rootPtr, code);
		return result;
	}

	private void readOneNode() throws IOException {
		nodesRead++;

		for (int j = 0; j < M - 1; j++) {
			KV[j] = "";
			TP[j] = file.readShort();
			// System.out.print(file.readShort()+" ");
			for (int i = 0; i < 3; i++) {
				KV[j] += (char) file.readByte();
			}
			// System.out.print(KV[j]+" ");
			DRP[j] = file.readShort();
			// System.out.print(DRP[j]+" ");
		}
		TP[TP.length - 1] = file.readShort();

	}

	private int searchOneNode(int pointer, String code) throws IOException {
		byteOffset(pointer);
		readOneNode();

		for (int k = 0; k < M - 1; k++) {
			System.out.print(TP[k]);
			System.out.print(KV[k]);
			System.out.print(DRP[k] + " ");

		}
		System.out.print(TP[TP.length - 1]);
		System.out.println();

		for (int k = 0; k < M - 1; k++) {
			// System.out.println(" Compare to: " + code.compareTo(KV[k]));
			if (code.compareTo(KV[k]) < 0) {
				// System.out.println("poop");
				if (TP[k] != -1) {
					// System.out.println("poop2");
					return searchOneNode(TP[k], code);
				} else {
					// System.out.println("poop3");
					return -1;
				}
			} else if (code.compareTo(KV[k]) == 0) {
				// System.out.println("poop4 " + DRP[k]);
				return DRP[k];
			} else if ((code.compareTo(KV[k]) > 0 && k + 1 == M - 1)
					|| (code.compareTo(KV[k]) > 0 && KV[k + 1].equals("]]]"))) {
				// System.out.println("poop5");
				if (TP[k + 1] != -1) {
					// System.out.println("poop6");
					return searchOneNode(TP[k + 1], code);
				} else {
					// System.out.println("poop7");
					return -1;
				}
			}
		}
		return -1;
	}

	private void byteOffset(int pointer) throws IOException {

		byteOffset = 6 + ((pointer - 1) * sizeOfDataRec);
		if (byteOffset < file.length()) {
			// System.out.println(" seek to: " + byteOffset);
			file.seek(byteOffset);
		}
	}

	// Closes the file
	public void finishUp() throws IOException {

		file.close();

	}

	public int getNodesRead() {
		return nodesRead;
	}

}
