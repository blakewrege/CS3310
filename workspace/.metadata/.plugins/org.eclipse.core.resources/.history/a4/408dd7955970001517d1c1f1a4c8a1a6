
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.IOException;

public class fileobj3
{
public static void main(String args[]) throws IOException
{

String s = "";
int poo = 1958201;
String hexstr = Integer.toHexString(poo); 
System.out.println("Converts Int to Hex to Ascii");
System.out.print("Int= "+poo+" \nHex= "+ hexstr+"\n");

if(hexstr.length()==6){
	hexstr = "00"+hexstr.substring(0, 6);
}

int decpoo = 0;


String Hexarry[] = new String[4];
int Decarry[] = new int[4];

for (int c=0; c<hexstr.length(); c=c+2) {
Hexarry[c/2] = hexstr.substring(c, c+2);	
Decarry[c/2] = hex2decimal(hexstr.substring(c, c+2));	
System.out.println("Hex= "+ Hexarry[c/2] +" Dec= "+Decarry[c/2] +" ASCII= "+(char)Decarry[c/2] );

} 


}


public static int hex2decimal(String s) {
    String digits = "0123456789ABCDEF";
    s = s.toUpperCase();
    int val = 0;
    for (int i = 0; i < s.length(); i++) {
        char c = s.charAt(i);
        int d = digits.indexOf(c);
        val = 16*val + d;
    }
    return val;
}

}



/*
1234 = 49-50-51-52 = 31-32-33-34 = 825373492

example from program = 1958201
 
 
 
 Output
49-49-49-49-
825307441

As we can see, each "0" in the String is turning into a byte of 48. Mysterious until we realize that 48 is hex 30 which is the 
charset representation of zero. So if we get out our handy hex to decimal converter and type in 30303030 and convert that to 
decimal we get 808464432 which is what the above program prints out.

So let's look at your example:

For the int "1234" converts to bytes in decimal = 49-50-51-52 which converts to 31-32-33-34 in hex. Converting the number 
31323334 to decimal gives: 825373492 which is exactly the answer. I will leave the rest an an excercise to the reader.

*/


