
import scala.collection.mutable.ListBuffer
class Node(id: Int) {
  var edges = List[Edge]()

  def addEdge(other: Node, weight: Int) = {
    val edge = new Edge(this, other, weight)
    edges = edge :: edges
    edge
  }

  override def toString() = id.toString
}

class Edge(val from: Node, val to: Node, val weight: Int) extends Ordered[Edge] {
  // Inverse ordering; should really be external.
  def compare(that: Edge) = that.weight compare weight
  override def toString() = from + "," + to + "," + weight
}


object primsAlgo2 {
  var numNodes = 0
  var numEdges = 0

  def main(args: Array[String]) {
    var count = 0
    val rowArray = readCSV("NodeData.txt")
    val colArray = rowArray.transpose
//    val nodesList = (colArray(0).toList ++ colArray(1).toList).distinct
    var nodeStruct = new Array[Node](numNodes)

    while (count < numNodes + 1) {

      nodeStruct(count) = new Node(count)
      count = count + 1
    }
    count = 0

    while (count < colArray(0).length) {
      nodeStruct(rowArray(count)(0).toInt).addEdge(nodeStruct(rowArray(count)(1).toInt), rowArray(count)(2).toInt)
      nodeStruct(rowArray(count)(1).toInt).addEdge(nodeStruct(rowArray(count)(0).toInt), rowArray(count)(2).toInt)
      count = count + 1
    }
    count = 0

    val graph = nodeStruct.toList

    // generateMST(graph).sortWith(_ < _).foreach(println)



  }

  def readCSV(fileName: String): Array[Array[Double]] = {
    val bufferedSource = io.Source.fromFile(fileName)
    
    var matrix: Array[Array[Double]] = Array.empty
    for (line <- bufferedSource.getLines) {
      val cols = line.split(",").map(_.trim.toDouble)
      if(cols.length==3){
      matrix = matrix :+ cols
      }else{
       val headNode = line.split(",").toList
        numNodes = headNode(0).toInt
        numEdges = headNode(1).toInt
        
      }
    }
    bufferedSource.close
    return matrix
  }

}