import java.io.IOException;

public class CustomerPQ {
	private int N;
	private final int maxN=200;
	private Node[] heap;
	private int initialPriorityValue = 100;
	private int priorityValue;
	
	public CustomerPQ(UIoutput output)
	{
		heap = new Node[maxN];
		N = 0;
		
	}


	public void insert(int count, String theLine, UIoutput output) throws IOException{
		//output.displayThis(theLine+" \n");
		String fields[] = theLine.split(",");
		for (int i = 0; i < fields.length; i++) {
		//	fields[i] = info[i+1];

		}
		//System.out.print(fields[0]);
		//System.out.println(" Length: "+fields.length);
		determinePriorityValue(fields);
		//System.out.println(""+priorityValue);
		output.displayThis("ADDED: "+fields[0]+" ("+priorityValue+")"); 
		heapInsert(fields[0], priorityValue);
		
	}
	
	
	private void heapInsert(String value, int pv)
	{
		Node newNode = new Node(value, pv);
//		  Customer customer = new Customer(name, priority);
//	        heap.insert(customer);
//	        return customer;
		heap[N] = newNode;
		N++;
		
		walkUp(N-1);
		
	}
	
	private void walkUp(int i)
	{
		
		Node temp=heap[i];
		while(i > 0 && temp.getPriorityValue() < heap[(i-1)/2].getPriorityValue())
		{
		
				heap[i] = heap[(i-1)/2];
				i = (i-1)/2;
			
		}
		heap[i] = temp;
	}
	
	
	public void dumpNodes( UIoutput output) throws IOException {
   //     String result = String.format(">> SUB  PV   NAME%n");
		output.displayThis("Dump of current heap (array) - "+N+" nodes:"); 
        for (int i = 0; i < N; i++) {
        	
        	System.out.println(heap[i].getName()+" "+heap[i].getPriorityValue());
//            Customer customer = heap.getNodeAt(i);
//            result = result.concat(String.format(">> %d   %d  %s%n", i, customer.getPriority(), customer.getName()));
        }

 //       return result;
    }
	
	
	
	
	
	
	private void determinePriorityValue(String[] points) throws IOException
	{
		int age = new Integer(points[points.length-1]);
		priorityValue = ++initialPriorityValue;
		
		
		for(int i = 1; i<points.length-1;i++)
		{
			switch (points[i].toLowerCase()) 
			{
				case "employee":
					priorityValue-=10;
					break;
				case "owner":
					priorityValue-=(50+10);
					break;
				case "vip":
					priorityValue-=5;
					break;
				case "supervip":
					priorityValue-=(8+5);
					break;
				case "loyalty":
					priorityValue-=4;
					break;
				case "child":
					priorityValue-=2;
					break;
				
			}
		}
		if(age >= 65)
		{
			priorityValue-= 5;
			
		}
		
		if(age >=80)
		{
			priorityValue-= 5;
		}

	}
	
	
	
	public int getN()
	{

		return N;
	}
	
	
	
	

}
