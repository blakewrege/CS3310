
import scala.collection.mutable.ListBuffer



class Edge(val from: Node, val to: Node, val weight: Int) extends Ordered[Edge] {
  // Inverse ordering; should really be external.
  def compare(that: Edge) = that.weight compare weight
  override def toString() = from + "," + to + "," + weight
}

object primsAlgo {

  def main(args: Array[String]) {
    var count = 0
    val rowArray = readCSV("NodeData.txt")
    val colArray = rowArray.transpose
    val nodesList = (colArray(0).toList ++ colArray(1).toList).distinct
    var nodeStruct = new Array[Node](nodesList.length + 1)

    while (count < nodesList.length + 1) {

      nodeStruct(count) = new Node(count)
      count = count + 1
    }
    count = 0

    while (count < colArray(0).length) {
      nodeStruct(rowArray(count)(0).toInt).addEdge(nodeStruct(rowArray(count)(1).toInt), rowArray(count)(2).toInt)
      nodeStruct(rowArray(count)(1).toInt).addEdge(nodeStruct(rowArray(count)(0).toInt), rowArray(count)(2).toInt)
      count = count + 1
    }
    count = 0

    val graph = nodeStruct.toList

    // generateMST(graph).sortWith(_ < _).foreach(println)
    val readLines = generateMST(graph).sortWith(_ < _).toList

    readLines.length
    var totalLength = 0
    while (count < readLines.length) {
      val myLine = readLines(count).toString().split(",")
      totalLength = totalLength + myLine.last.toInt
      println(myLine(0) + " <--> " + myLine(1) + "    (" + myLine(2) + ")")
      count = count + 1
    }
    println(totalLength)
    var a = 0
    for (a <- 1 to (nodesList.length - 1)) {
      println(nodeStruct(a).edges.toList)
    }

  }

  def readCSV(fileName: String): Array[Array[Double]] = {
    val bufferedSource = io.Source.fromFile(fileName)

    var matrix: Array[Array[Double]] = Array.empty
    for (line <- bufferedSource.getLines) {
      val cols = line.split(",").map(_.trim.toDouble)
      if (cols.length == 3) {
        matrix = matrix :+ cols
      }
    }
    bufferedSource.close
    return matrix
  }

  def generateMST(graph: List[Node]): List[Edge] = {
    import scala.util.Random

    val startNode = graph(Random.nextInt(graph.length))

    var mst_nodes = List(startNode)
    var mst_edges = List[Edge]()

    val pq = new scala.collection.mutable.PriorityQueue[Edge]

    startNode.edges.foreach(e => pq.enqueue(e))

    while (!pq.isEmpty) {
      val edge = pq.dequeue

      if (!(mst_nodes contains edge.to)) {
        mst_nodes = edge.to :: mst_nodes
        mst_edges = edge :: mst_edges

        edge.to.edges.foreach(e => pq.enqueue(e))
      }
    }

    mst_edges

  }
}