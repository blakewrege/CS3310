
public class Heap {

	private Node[] nodes;

	public Heap(int maxN) {
		nodes = new Node[maxN];
	}

	public Node getNodeAt(int index) {
		return nodes[index];
	}

	public Node getLC(int index) {
		return getNodeAt(2 * index);
	}

	public Node getRC(int index) {
		return getNodeAt(2 * index + 1);
	}

	public Node getParent(int index) {
		return getNodeAt(index / 2);
	}

	public void switchNodes(int index1, int index2) {
		Node temp = nodes[index1];
		nodes[index1] = nodes[index2];
		nodes[index2] = temp;
	}

	public void insert(Node node, int N) {
//		
//        int cursor = N;
//        insert(N+ 1, node, true);
//        /* Compare to parent */
//        while (cursor > 0 && node.compareTo(getNodeAt(cursor / 2)) < 0) {
//            insert(cursor, getNodeAt(cursor / 2), true);
//            cursor /= 2;
//        }
//
//        insert(cursor, node, true);
//		
//		
//		
//		
				

			 insert(N+2, node, true); 
		 
//		System.out.println(N + nodes[N].getName());
//		 if(N>0)
//			 System.out.println(nodes[0].getName());
		//insert(N, node, true, N);
		/* Compare to parent */
		// while (cursor > 1 && node.compareTo(getNodeAt(cursor / 2)) < 0) {
		// insert(cursor, getNodeAt(cursor / 2), true, N);
		// cursor /= 2;
		// }
		walkUp(N, node, N);

	}

	private void walkUp(int i, Node node, int N) {
	//	System.out.println(node.getName()); 

		while (i > 0 && node.getPriorityValue() <  getParent(i-1)) {

			insert(i, getNodeAt(Math.abs(i / 2)), true);
			i = i / 2;

		}
		insert(i, node, true);
	}

	public void insert(int index, Node node, boolean overwrite) {
		if (index >= index-2 || overwrite) {
			nodes[index] = node;
			//System.out.println(index);
		}
	}
	
}
