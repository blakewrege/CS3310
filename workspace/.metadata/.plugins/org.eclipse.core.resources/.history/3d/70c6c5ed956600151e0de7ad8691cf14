import scala.collection.mutable.ListBuffer
import scala.io.Source
import _root_.scala.tools.nsc
import jdk.nashorn.internal.runtime.Source.RawData
import scala.reflect.internal.Trees.This

/* 
 * Note: in scala you can't overload classes only functions
 * I had to use some unque 
 */


class DataStorage(val filedata: Iterator[String]) {
   
  val fileLines = filedata.toList
  var count = 0
  val codearray = new ListBuffer[String]()
  val valuearray = new ListBuffer[Int]()
  
  while (count < (fileLines.length)) {
    val words = fileLines(count).split(",")
    codearray += words(1)
    valuearray += words(1).toList.head.toInt - 64
    count = count + 1;
  }
  
  val codeList = codearray.toList
  val valueList = valuearray.toList
  val sortedList = codeList.sortWith(_ < _)
  scala.tools.nsc.io.File("Backup.csv").writeAll(sortedList.mkString(","))
  
  

}




  
