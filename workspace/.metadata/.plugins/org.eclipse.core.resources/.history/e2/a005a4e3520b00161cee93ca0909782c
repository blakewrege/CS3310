
import scala.collection.mutable.ListBuffer



object primsAlgo2 {

  def main(args: Array[String]) {
    var count = 0
    val rowArray = readCSV("NodeData.txt")
    val colArray = rowArray.transpose
    val nodesList = (colArray(0).toList ++ colArray(1).toList).distinct
    var nodeStruct = new Array[Node](nodesList.length + 1)

    while (count < nodesList.length + 1) {

      nodeStruct(count) = new Node(count)
      count = count + 1
    }
    count = 0

    while (count < colArray(0).length) {
      nodeStruct(rowArray(count)(0).toInt).addEdge(nodeStruct(rowArray(count)(1).toInt), rowArray(count)(2).toInt)
      nodeStruct(rowArray(count)(1).toInt).addEdge(nodeStruct(rowArray(count)(0).toInt), rowArray(count)(2).toInt)
      count = count + 1
    }
    count = 0

    val graph = nodeStruct.toList

    // generateMST(graph).sortWith(_ < _).foreach(println)



  }

  def readCSV(fileName: String): Array[Array[Double]] = {
    val bufferedSource = io.Source.fromFile(fileName)
    
    var matrix: Array[Array[Double]] = Array.empty
    for (line <- bufferedSource.getLines) {
      val cols = line.split(",").map(_.trim.toDouble)
      if(cols.length==3){
      matrix = matrix :+ cols
      }
    }
    bufferedSource.close
    return matrix
  }

}